{"ast":null,"code":"'use strict';\n/*global ActiveXObject:true*/\n\nvar defaults = require('./../defaults');\n\nvar utils = require('./../utils');\n\nvar buildUrl = require('./../helpers/buildUrl');\n\nvar parseHeaders = require('./../helpers/parseHeaders');\n\nvar transformData = require('./../helpers/transformData');\n\nmodule.exports = function xhrAdapter(resolve, reject, config) {\n  // Transform request data\n  var data = transformData(config.data, config.headers, config.transformRequest); // Merge headers\n\n  var requestHeaders = utils.merge(defaults.headers.common, defaults.headers[config.method] || {}, config.headers || {});\n\n  if (utils.isFormData(data)) {\n    delete requestHeaders['Content-Type']; // Let the browser set it\n  } // Create the request\n\n\n  var request = new (XMLHttpRequest || ActiveXObject)('Microsoft.XMLHTTP');\n  request.open(config.method.toUpperCase(), buildUrl(config.url, config.params), true); // Set the request timeout in MS\n\n  request.timeout = config.timeout; // Listen for ready state\n\n  request.onreadystatechange = function () {\n    if (request && request.readyState === 4) {\n      // Prepare the response\n      var responseHeaders = parseHeaders(request.getAllResponseHeaders());\n      var responseData = ['text', ''].indexOf(config.responseType || '') !== -1 ? request.responseText : request.response;\n      var response = {\n        data: transformData(responseData, responseHeaders, config.transformResponse),\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config: config\n      }; // Resolve or reject the Promise based on the status\n\n      (request.status >= 200 && request.status < 300 ? resolve : reject)(response); // Clean up request\n\n      request = null;\n    }\n  }; // Add xsrf header\n  // This is only done if running in a standard browser environment.\n  // Specifically not if we're in a web worker, or react-native.\n\n\n  if (utils.isStandardBrowserEnv()) {\n    var cookies = require('./../helpers/cookies');\n\n    var urlIsSameOrigin = require('./../helpers/urlIsSameOrigin'); // Add xsrf header\n\n\n    var xsrfValue = urlIsSameOrigin(config.url) ? cookies.read(config.xsrfCookieName || defaults.xsrfCookieName) : undefined;\n\n    if (xsrfValue) {\n      requestHeaders[config.xsrfHeaderName || defaults.xsrfHeaderName] = xsrfValue;\n    }\n  } // Add headers to the request\n\n\n  utils.forEach(requestHeaders, function (val, key) {\n    // Remove Content-Type if data is undefined\n    if (!data && key.toLowerCase() === 'content-type') {\n      delete requestHeaders[key];\n    } // Otherwise add header to the request\n    else {\n        request.setRequestHeader(key, val);\n      }\n  }); // Add withCredentials to request if needed\n\n  if (config.withCredentials) {\n    request.withCredentials = true;\n  } // Add responseType to request if needed\n\n\n  if (config.responseType) {\n    try {\n      request.responseType = config.responseType;\n    } catch (e) {\n      if (request.responseType !== 'json') {\n        throw e;\n      }\n    }\n  }\n\n  if (utils.isArrayBuffer(data)) {\n    data = new DataView(data);\n  } // Send the request\n\n\n  request.send(data);\n};","map":{"version":3,"sources":["/Users/sudhichaiungsuthornrungsi/Documents/react-smct/node_modules/axios/lib/adapters/xhr.js"],"names":["defaults","require","utils","buildUrl","parseHeaders","transformData","module","exports","xhrAdapter","resolve","reject","config","data","headers","transformRequest","requestHeaders","merge","common","method","isFormData","request","XMLHttpRequest","ActiveXObject","open","toUpperCase","url","params","timeout","onreadystatechange","readyState","responseHeaders","getAllResponseHeaders","responseData","indexOf","responseType","responseText","response","transformResponse","status","statusText","isStandardBrowserEnv","cookies","urlIsSameOrigin","xsrfValue","read","xsrfCookieName","undefined","xsrfHeaderName","forEach","val","key","toLowerCase","setRequestHeader","withCredentials","e","isArrayBuffer","DataView","send"],"mappings":"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","sourcesContent":["'use strict';\n\n/*global ActiveXObject:true*/\n\nvar defaults = require('./../defaults');\nvar utils = require('./../utils');\nvar buildUrl = require('./../helpers/buildUrl');\nvar parseHeaders = require('./../helpers/parseHeaders');\nvar transformData = require('./../helpers/transformData');\n\nmodule.exports = function xhrAdapter(resolve, reject, config) {\n  // Transform request data\n  var data = transformData(\n    config.data,\n    config.headers,\n    config.transformRequest\n  );\n\n  // Merge headers\n  var requestHeaders = utils.merge(\n    defaults.headers.common,\n    defaults.headers[config.method] || {},\n    config.headers || {}\n  );\n\n  if (utils.isFormData(data)) {\n    delete requestHeaders['Content-Type']; // Let the browser set it\n  }\n\n  // Create the request\n  var request = new (XMLHttpRequest || ActiveXObject)('Microsoft.XMLHTTP');\n  request.open(config.method.toUpperCase(), buildUrl(config.url, config.params), true);\n\n  // Set the request timeout in MS\n  request.timeout = config.timeout;\n\n  // Listen for ready state\n  request.onreadystatechange = function () {\n    if (request && request.readyState === 4) {\n      // Prepare the response\n      var responseHeaders = parseHeaders(request.getAllResponseHeaders());\n      var responseData = ['text', ''].indexOf(config.responseType || '') !== -1 ? request.responseText : request.response;\n      var response = {\n        data: transformData(\n          responseData,\n          responseHeaders,\n          config.transformResponse\n        ),\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config: config\n      };\n\n      // Resolve or reject the Promise based on the status\n      (request.status >= 200 && request.status < 300 ?\n        resolve :\n        reject)(response);\n\n      // Clean up request\n      request = null;\n    }\n  };\n\n  // Add xsrf header\n  // This is only done if running in a standard browser environment.\n  // Specifically not if we're in a web worker, or react-native.\n  if (utils.isStandardBrowserEnv()) {\n    var cookies = require('./../helpers/cookies');\n    var urlIsSameOrigin = require('./../helpers/urlIsSameOrigin');\n\n    // Add xsrf header\n    var xsrfValue = urlIsSameOrigin(config.url) ?\n        cookies.read(config.xsrfCookieName || defaults.xsrfCookieName) :\n        undefined;\n\n    if (xsrfValue) {\n      requestHeaders[config.xsrfHeaderName || defaults.xsrfHeaderName] = xsrfValue;\n    }\n  }\n\n  // Add headers to the request\n  utils.forEach(requestHeaders, function (val, key) {\n    // Remove Content-Type if data is undefined\n    if (!data && key.toLowerCase() === 'content-type') {\n      delete requestHeaders[key];\n    }\n    // Otherwise add header to the request\n    else {\n      request.setRequestHeader(key, val);\n    }\n  });\n\n  // Add withCredentials to request if needed\n  if (config.withCredentials) {\n    request.withCredentials = true;\n  }\n\n  // Add responseType to request if needed\n  if (config.responseType) {\n    try {\n      request.responseType = config.responseType;\n    } catch (e) {\n      if (request.responseType !== 'json') {\n        throw e;\n      }\n    }\n  }\n\n  if (utils.isArrayBuffer(data)) {\n    data = new DataView(data);\n  }\n\n  // Send the request\n  request.send(data);\n};\n"]},"metadata":{},"sourceType":"script"}