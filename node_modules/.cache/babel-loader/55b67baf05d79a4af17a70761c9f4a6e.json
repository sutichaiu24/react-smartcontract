{"ast":null,"code":"'use strict';\n/*global toString:true*/\n// utils is a library of generic helper functions non-specific to axios\n\nvar toString = Object.prototype.toString;\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Array, otherwise false\n */\n\nfunction isArray(val) {\n  return toString.call(val) === '[object Array]';\n}\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\n\n\nfunction isArrayBuffer(val) {\n  return toString.call(val) === '[object ArrayBuffer]';\n}\n/**\n * Determine if a value is a FormData\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an FormData, otherwise false\n */\n\n\nfunction isFormData(val) {\n  return toString.call(val) === '[object FormData]';\n}\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\n\n\nfunction isArrayBufferView(val) {\n  if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {\n    return ArrayBuffer.isView(val);\n  } else {\n    return val && val.buffer && val.buffer instanceof ArrayBuffer;\n  }\n}\n/**\n * Determine if a value is a String\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a String, otherwise false\n */\n\n\nfunction isString(val) {\n  return typeof val === 'string';\n}\n/**\n * Determine if a value is a Number\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Number, otherwise false\n */\n\n\nfunction isNumber(val) {\n  return typeof val === 'number';\n}\n/**\n * Determine if a value is undefined\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if the value is undefined, otherwise false\n */\n\n\nfunction isUndefined(val) {\n  return typeof val === 'undefined';\n}\n/**\n * Determine if a value is an Object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Object, otherwise false\n */\n\n\nfunction isObject(val) {\n  return val !== null && typeof val === 'object';\n}\n/**\n * Determine if a value is a Date\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Date, otherwise false\n */\n\n\nfunction isDate(val) {\n  return toString.call(val) === '[object Date]';\n}\n/**\n * Determine if a value is a File\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a File, otherwise false\n */\n\n\nfunction isFile(val) {\n  return toString.call(val) === '[object File]';\n}\n/**\n * Determine if a value is a Blob\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Blob, otherwise false\n */\n\n\nfunction isBlob(val) {\n  return toString.call(val) === '[object Blob]';\n}\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n * @returns {String} The String freed of excess whitespace\n */\n\n\nfunction trim(str) {\n  return str.replace(/^\\s*/, '').replace(/\\s*$/, '');\n}\n/**\n * Determine if a value is an Arguments object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Arguments object, otherwise false\n */\n\n\nfunction isArguments(val) {\n  return toString.call(val) === '[object Arguments]';\n}\n/**\n * Determine if we're running in a standard browser environment\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n *  typeof window -> undefined\n *  typeof document -> undefined\n *\n * react-native:\n *  typeof document.createelement -> undefined\n */\n\n\nfunction isStandardBrowserEnv() {\n  return typeof window !== 'undefined' && typeof document !== 'undefined' && typeof document.createElement === 'function';\n}\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array or arguments callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n */\n\n\nfunction forEach(obj, fn) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  } // Check if obj is array-like\n\n\n  var isArrayLike = isArray(obj) || isArguments(obj); // Force an array if not already something iterable\n\n  if (typeof obj !== 'object' && !isArrayLike) {\n    obj = [obj];\n  } // Iterate over array values\n\n\n  if (isArrayLike) {\n    for (var i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } // Iterate over object keys\n  else {\n      for (var key in obj) {\n        if (obj.hasOwnProperty(key)) {\n          fn.call(null, obj[key], key, obj);\n        }\n      }\n    }\n}\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n * @returns {Object} Result of all merge properties\n */\n\n\nfunction merge()\n/*obj1, obj2, obj3, ...*/\n{\n  var result = {};\n  forEach(arguments, function (obj) {\n    forEach(obj, function (val, key) {\n      result[key] = val;\n    });\n  });\n  return result;\n}\n\nmodule.exports = {\n  isArray: isArray,\n  isArrayBuffer: isArrayBuffer,\n  isFormData: isFormData,\n  isArrayBufferView: isArrayBufferView,\n  isString: isString,\n  isNumber: isNumber,\n  isObject: isObject,\n  isUndefined: isUndefined,\n  isDate: isDate,\n  isFile: isFile,\n  isBlob: isBlob,\n  isStandardBrowserEnv: isStandardBrowserEnv,\n  forEach: forEach,\n  merge: merge,\n  trim: trim\n};","map":{"version":3,"sources":["/Users/sudhichaiungsuthornrungsi/Documents/react-smct/node_modules/axios/lib/utils.js"],"names":["toString","Object","prototype","isArray","val","call","isArrayBuffer","isFormData","isArrayBufferView","ArrayBuffer","isView","buffer","isString","isNumber","isUndefined","isObject","isDate","isFile","isBlob","trim","str","replace","isArguments","isStandardBrowserEnv","window","document","createElement","forEach","obj","fn","isArrayLike","i","l","length","key","hasOwnProperty","merge","result","arguments","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/*global toString:true*/\n\n// utils is a library of generic helper functions non-specific to axios\n\nvar toString = Object.prototype.toString;\n\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Array, otherwise false\n */\nfunction isArray(val) {\n  return toString.call(val) === '[object Array]';\n}\n\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\nfunction isArrayBuffer(val) {\n  return toString.call(val) === '[object ArrayBuffer]';\n}\n\n/**\n * Determine if a value is a FormData\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an FormData, otherwise false\n */\nfunction isFormData(val) {\n  return toString.call(val) === '[object FormData]';\n}\n\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\nfunction isArrayBufferView(val) {\n  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\n    return ArrayBuffer.isView(val);\n  } else {\n    return (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);\n  }\n}\n\n/**\n * Determine if a value is a String\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a String, otherwise false\n */\nfunction isString(val) {\n  return typeof val === 'string';\n}\n\n/**\n * Determine if a value is a Number\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Number, otherwise false\n */\nfunction isNumber(val) {\n  return typeof val === 'number';\n}\n\n/**\n * Determine if a value is undefined\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if the value is undefined, otherwise false\n */\nfunction isUndefined(val) {\n  return typeof val === 'undefined';\n}\n\n/**\n * Determine if a value is an Object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Object, otherwise false\n */\nfunction isObject(val) {\n  return val !== null && typeof val === 'object';\n}\n\n/**\n * Determine if a value is a Date\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Date, otherwise false\n */\nfunction isDate(val) {\n  return toString.call(val) === '[object Date]';\n}\n\n/**\n * Determine if a value is a File\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a File, otherwise false\n */\nfunction isFile(val) {\n  return toString.call(val) === '[object File]';\n}\n\n/**\n * Determine if a value is a Blob\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Blob, otherwise false\n */\nfunction isBlob(val) {\n  return toString.call(val) === '[object Blob]';\n}\n\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n * @returns {String} The String freed of excess whitespace\n */\nfunction trim(str) {\n  return str.replace(/^\\s*/, '').replace(/\\s*$/, '');\n}\n\n/**\n * Determine if a value is an Arguments object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Arguments object, otherwise false\n */\nfunction isArguments(val) {\n  return toString.call(val) === '[object Arguments]';\n}\n\n/**\n * Determine if we're running in a standard browser environment\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n *  typeof window -> undefined\n *  typeof document -> undefined\n *\n * react-native:\n *  typeof document.createelement -> undefined\n */\nfunction isStandardBrowserEnv() {\n  return (\n    typeof window !== 'undefined' &&\n    typeof document !== 'undefined' &&\n    typeof document.createElement === 'function'\n  );\n}\n\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array or arguments callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n */\nfunction forEach(obj, fn) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  // Check if obj is array-like\n  var isArrayLike = isArray(obj) || isArguments(obj);\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object' && !isArrayLike) {\n    obj = [obj];\n  }\n\n  // Iterate over array values\n  if (isArrayLike) {\n    for (var i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  }\n  // Iterate over object keys\n  else {\n    for (var key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        fn.call(null, obj[key], key, obj);\n      }\n    }\n  }\n}\n\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n * @returns {Object} Result of all merge properties\n */\nfunction merge(/*obj1, obj2, obj3, ...*/) {\n  var result = {};\n  forEach(arguments, function (obj) {\n    forEach(obj, function (val, key) {\n      result[key] = val;\n    });\n  });\n  return result;\n}\n\nmodule.exports = {\n  isArray: isArray,\n  isArrayBuffer: isArrayBuffer,\n  isFormData: isFormData,\n  isArrayBufferView: isArrayBufferView,\n  isString: isString,\n  isNumber: isNumber,\n  isObject: isObject,\n  isUndefined: isUndefined,\n  isDate: isDate,\n  isFile: isFile,\n  isBlob: isBlob,\n  isStandardBrowserEnv: isStandardBrowserEnv,\n  forEach: forEach,\n  merge: merge,\n  trim: trim\n};\n"]},"metadata":{},"sourceType":"script"}